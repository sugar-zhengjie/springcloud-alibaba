server:
  port: 9876
spring:
  application:
    name: gateway
    gateway:
      discovery:
        locator:
          enabled: true  #表明gateway开启服务注册和发现的功能，并且spring cloud gateway自动根据服务发现为每一个服务创建了一个router，这个router将以服务名开头的请求路径转发到对应的服务
          lower-case-service-id: true  #是将请求路径上的服务名配置为小写（因为服务注册的时候，向注册中心注册时将服务名转成大写的了
      routes:
        - id: user  #自定义id,无意义但不能重复，最好跟服务名保持一致
          uri: lb://user  # 注册中心中的服务名
          predicates:
            - Path=/user/** # 转发该路径
          filters:
            - StripPrefix=1 #必须加上StripPrefix=1，否则访问服务时会带上user
            #限流 redis令牌桶
            - name: RequestRateLimiter #固定的
              args:
                key-resolver: '#{@pathKeyResolver}' # 用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。
                redis-rate-limiter.replenishRate: 1 # 令牌桶每秒填充平均速率
                redis-rate-limiter.burstCapacity: 3 # 令牌桶的总容量
            # 熔断
            - name: CircuitBreaker
              args:
                fallbackUri: forward:/fallback
                name: myCircuitBreaker
                fallbackHeaders:
                  foo: bar
                statusCodes:
                  - SERVICE_UNAVAILABLE
                  - GATEWAY_TIMEOUT
                routeId: user
                fallbackUriExpression: "'/fallback'"
                index: 1
            # 重试
            - name: Retry
              args:
                # 请求重试次数，默认值是3
                retries: 3
                # 可以进行重试的状态码（500、404），
                statuses: INTERNAL_SERVER_ERROR,NOT_FOUND
                # 可以进行重试的Http Method
                methods: GET,POST
                # 重试的时间间隔配置
                backoff:
                  # 第一次重试的时间间隔
                  firstBackoff: 100ms
                  # 最大重试时间间隔
                  maxBackoff: 500ms
                  # 时间间隔因子
                  factor: 2
                  # 关闭根据上次重试时间间隔计算当前重试时间间隔功能
                  basedOnPreviousValue: false
        - id: order
            uri: lb://order
            predicates:
              - Path=/order/**
            filters:
              - StripPrefix=1
        - id: product
            uri: lb://product
            predicates:
              - Path=/product/**
            filters:
              - StripPrefix=1
        - id: shopcart
            uri: lb://shopcart
            predicates:
              - Path=/shopcart/**
            filters:
              - StripPrefix=1
        - id: skill
            uri: lb://skill
            predicates:
              - Path=/skill/**
            filters:
              - StripPrefix=1
        - id: stock
            uri: lb://stock
            predicates:
              - Path=/stock/**
            filters:
              - StripPrefix=1
      # 经过gateWay网关时，需要在网关统一配置跨域请求，全部通过
      globalcors:
        cors-configurations:
          '[/**]':
            allowed-origins: "*"
            allowed-headers: "*"
            allow-credentials: true
            allowed-methods:
              - GET
              - POST
              - DELETE
              - PUT
              - OPTION
# 配置类已配置了CircuitBreaker，如果无配置类可通过配置文件配置
#    circuitbreaker:
#      resilience4j:
#        circuitbreaker:
#          instances:
#            myCircuitBreaker:
#              slidingWindowSize: 10
#              minimumNumberOfCalls: 20
#              permittedNumberOfCallsInHalfOpenState: 3
#              automaticTransitionFromOpenToHalfOpenEnabled: true
#              waitDurationInOpenState: 5s
#              failureRateThreshold: 50
#              eventConsumerBufferSize: 10
#              registerHealthIndicator: true
  jackson:
    time-zone: Asia/Shanghai
    date-format: yyyy-MM-dd HH:mm:ss
    security:
      oauth2:
        resourceserver:
          jwt:
            jwk-set-uri: 'http://zj.com/oauth/public_key'
logging:
  level:
    com:
      alibaba:
        cloud:
          nacos:
            refresh:
              NacosContextRefresher: DEBUG
      ibatis: DEBUG
      netflix:
        config:
          sources:
            URLConfigurationSource: ERROR
        hystrix:
          strategy:
            properties:
              HystrixPropertiesChainedProperty: DEBUG
      ulisesbocchio:
        jasyptspringboot:
          EncryptablePropertySourceConverter: ERROR
    org:
      springframework:
        cloud:
          gateway: DEBUG
        boot:
          actuate:
            endpoint:
              EndpointId: ERROR
    reactor:
      netty:
        http:
          client: DEBUG
    root: WARN

# 多租户配置
tenant:
  # 是否开启租户模式
  enable: true
  # 需要排除的多租户的表
  exclusionTable:
    - "t_sys_district"
    - "t_sys_tenant"
    - "t_sys_role"
    - "t_sys_resource"
    - "t_sys_role_resource"
  # 租户字段名称
  column: tenant_id
# 网关放行白名单，配置白名单路径
white-list:
  urls:
    - "/oauth/public_key"
